{"pageProps":{"postData":{"id":"seo-no-react","contentHtml":"<p>Esses dias eu estava pensando em como lidar com SEO em sites feitos com React. Você provavelmente sabe o que é SEO, mas em todo caso segue uma definição: </p>\n<p><em>SEO (Search Engine Optimization) é definido como um conjunto de estratégias e técnicas com o objetivo de potencializar e melhorar o posicionamento de um site nos resultados de busca do Google e outros buscadores, conquistando mais visitantes e consequentemente mais conversões.</em></p>\n<p>Resumindo, você quer que seu site seja encontrado nos resultados das buscas e para isso existem alguns pontos a serem considerados.<br><br></p>\n<h1>Entendendo o problema</h1>\n<p>Ao criar as interfaces utilizando o React, todo o HTML será gerado através do JavaScript, então até que a página seja carregada, não existe nenhum conteúdo HTML renderizado para que seja indexado pelos mecanismos de busca.</p>\n<p>Depois de procurar por algumas soluções, encontrei duas maneiras que achei útil compartilhar.<br><br></p>\n<h1>React Helmet</h1>\n<p>Esse pacote disponível no npm permite que a tag head seja adicionada nas páginas, sendo assim é possível configurar as tags importantes para SEO nos seus componentes. Além disso é super simples de implementar.</p>\n<p>Aqui está um exemplo de como funciona:<br></p>\n<p><img src=\"/images/code-example1.png\" alt=\"Code example\"></p>\n<p>É só importar o componente Helmet do pacote react-helmet e colocar as tags que você precisar dentro em cada página que você quiser.</p>\n<p>Para ver mais sobre o React Helmet, aqui vai o link do <a href=\"https://github.com/nfl/react-helmet\">GitHub</a>.<br><br></p>\n<h1>NextJS</h1>\n<p>Se o SEO é algo crucial no seu site, como um ecommerce ou um blog por exemplo, então talvez você deva considerar o uso do NextJS que nada mais é do que um framework que nos permite desenvolver aplicações web estáticas utilizando React, porém no lado do servidor, conhecido como SSR (server-side rendering). </p>\n<p>Com esse processo de SSR, o Node faz a renderização do HTML antes da requisição chegar, então todo o conteúdo HTML está pronto para ser exibido.<br><br></p>\n<h3>Pincelando um pouco do NextJS</h3>\n<p>Dentro de cada página nós podemos utilizar componentes que já vem no core do Next como por exemplo o componente Head.\nEle funciona exatamente como a tag head do HTML e vai nos permitir setar as tags referentes ao SEO.</p>\n<p>Aqui um exemplo de uma página no NextJS:</p>\n<p><img src=\"/images/code-example2.png\" alt=\"Code example\"></p>\n<p>Como já comentei acima, o que difere esse framework do React é a capacidade de gerar páginas estáticas e também utilizar a renderização no lado do servidor, elas funcionam da seguinte maneira:</p>\n<ul>\n<li><strong>Static Generation:</strong> quando o HTML é gerado no momento do build e as páginas estáticas que foram criadas são reutilizadas em cada requisição.</li>\n<li><strong>Server-side Rendering (SSR):</strong> quando o HTML é gerado em cada requisição.</li>\n</ul>\n<p>Mas quando utilizar cada uma dessas duas renderizações?</p>\n<p>Para páginas estáticas, onde o conteúdo pode ser renderizado antes de um requisição do usuário você deve utilizar a geração estática. Agora se você precisa mostrar conteúdos frequentemente atualizados você deve usar SSR.</p>\n<p>Você também pode definir qual deles usar em cada página do seu site, e quando isso é feito temos o que é chamado de aplicação híbrida.</p>\n<p>Se você quer ler mais sobre o Next, aqui está o <a href=\"https://nextjs.org/\">link</a> da documentação.<br><br></p>\n<p>E concluindo, se você usar uma dessas opções você certamente terá um bom resultado em termos de SEO para o seu site.</p>\n","title":"Como lidar com SEO no React?","date":"2020-05-12 22:15:00"}},"__N_SSG":true}